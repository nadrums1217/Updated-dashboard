const state={weather:{city1:null,city2:null},historical:{city1:null,city2:null},aqi:{city1:null,city2:null},history30Days:{city1:[],city2:[]},previousWeather:{city1:null,city2:null},loading:true,error:null,lastUpdate:null,showSettings:false,activeTab:'overview',battleMode:false,settings:JSON.parse(localStorage.getItem('weatherSettings'))||{city1:{name:'Oneonta, NY',lat:42.4528,lon:-75.0638},city2:{name:'Gray Court, SC',lat:34.6193,lon:-82.0787},tempUnit:'fahrenheit',autoRefresh:true,theme:'dark',animations:true},streaks:JSON.parse(localStorage.getItem('weatherStreaks'))||{city1:{},city2:{}}};
const THEMES={dark:{name:'Dark',bg:'theme-dark',card:'bg-zinc-900',border:'border-zinc-800',text:'text-zinc-100'},ocean:{name:'Ocean',bg:'theme-ocean',card:'bg-white bg-opacity-10',border:'border-white border-opacity-20',text:'text-white'},sunset:{name:'Sunset',bg:'theme-sunset',card:'bg-white bg-opacity-10',border:'border-white border-opacity-20',text:'text-white'},forest:{name:'Forest',bg:'theme-forest',card:'bg-white bg-opacity-10',border:'border-white border-opacity-20',text:'text-white'},arctic:{name:'Arctic',bg:'theme-arctic',card:'bg-white bg-opacity-40',border:'border-gray-300',text:'text-gray-900'}};
class WeatherAnimator{constructor(){this.canvas=document.getElementById('weatherAnimation');if(!this.canvas){this.canvas=document.createElement('canvas');this.canvas.id='weatherAnimation';this.canvas.className='fixed inset-0 pointer-events-none z-0';document.body.appendChild(this.canvas);const a=document.getElementById('app');if(a)a.classList.add('relative','z-10')}const c=this.canvas.getContext('2d');if(!c)throw new Error('2D context not available');this.ctx=c;this.particles=[];this._raf=null;this.resize();window.addEventListener('resize',()=>this.resize())}resize(){const dpr=window.devicePixelRatio||1,w=window.innerWidth,h=window.innerHeight;this.canvas.style.width=w+'px';this.canvas.style.height=h+'px';this.canvas.width=w*dpr;this.canvas.height=h*dpr;this.ctx.setTransform(dpr,0,0,dpr,0,0)}clear(){this.particles=[];this.ctx.clearRect(0,0,this.canvas.width,this.canvas.height);if(this._raf){cancelAnimationFrame(this._raf);this._raf=null}}createRain(){this.clear();for(let i=0;i<100;i++)this.particles.push({x:Math.random()*this.canvas.width,y:Math.random()*this.canvas.height,speed:5+Math.random()*5,length:10+Math.random()*20});this.animateRain()}animateRain(){this.ctx.clearRect(0,0,this.canvas.width,this.canvas.height);this.ctx.strokeStyle='rgba(174,194,224,0.5)';this.ctx.lineWidth=2;this.particles.forEach(p=>{this.ctx.beginPath();this.ctx.moveTo(p.x,p.y);this.ctx.lineTo(p.x,p.y+p.length);this.ctx.stroke();p.y+=p.speed;if(p.y>this.canvas.height){p.y=-p.length;p.x=Math.random()*this.canvas.width}});if(state.settings.animations)this._raf=requestAnimationFrame(()=>this.animateRain())}createSnow(){this.clear();for(let i=0;i<50;i++)this.particles.push({x:Math.random()*this.canvas.width,y:Math.random()*this.canvas.height,speed:1+Math.random()*2,size:2+Math.random()*4,wobble:Math.random()*2});this.animateSnow()}animateSnow(){this.ctx.clearRect(0,0,this.canvas.width,this.canvas.height);this.ctx.fillStyle='rgba(255,255,255,0.8)';this.particles.forEach(p=>{this.ctx.beginPath();this.ctx.arc(p.x,p.y,p.size,0,Math.PI*2);this.ctx.fill();p.y+=p.speed;p.x+=Math.sin(p.y/30)*p.wobble;if(p.y>this.canvas.height){p.y=-10;p.x=Math.random()*this.canvas.width}});if(state.settings.animations)this._raf=requestAnimationFrame(()=>this.animateSnow())}createSunny(){this.clear();this.animateSunny()}animateSunny(){this.ctx.clearRect(0,0,this.canvas.width,this.canvas.height);const cx=this.canvas.width-100,cy=100,t=Date.now()/1000;for(let i=0;i<12;i++){const a=i/12*Math.PI*2+t*0.1,g=this.ctx.createLinearGradient(cx,cy,cx+Math.cos(a)*100,cy+Math.sin(a)*100);g.addColorStop(0,'rgba(255,220,100,0.3)');g.addColorStop(1,'transparent');this.ctx.strokeStyle=g;this.ctx.lineWidth=3;this.ctx.beginPath();this.ctx.moveTo(cx,cy);this.ctx.lineTo(cx+Math.cos(a)*80,cy+Math.sin(a)*80);this.ctx.stroke()}if(state.settings.animations)this._raf=requestAnimationFrame(()=>this.animateSunny())}createCloudy(){this.clear();for(let i=0;i<5;i++)this.particles.push({x:Math.random()*this.canvas.width,y:50+Math.random()*200,speed:0.3+Math.random()*0.5,size:80+Math.random()*40});this.animateCloudy()}animateCloudy(){this.ctx.clearRect(0,0,this.canvas.width,this.canvas.height);this.particles.forEach(p=>{this.ctx.fillStyle='rgba(200,200,200,0.3)';this.ctx.beginPath();this.ctx.arc(p.x,p.y,p.size,0,Math.PI*2);this.ctx.arc(p.x+p.size*.6,p.y,p.size*.8,0,Math.PI*2);this.ctx.arc(p.x+p.size*1.2,p.y,p.size*.9,0,Math.PI*2);this.ctx.fill();p.x+=p.speed;if(p.x>this.canvas.width+p.size*2)p.x=-p.size*2});if(state.settings.animations)this._raf=requestAnimationFrame(()=>this.animateCloudy())}}
let animator=null;function updateWeatherAnimation(){if(!animator)animator=new WeatherAnimator();if(!state.settings.animations){animator.clear();return}const w=state.weather.city1||state.weather.city2;if(!w)return;const c=w.current.weather_code;if(c===0)animator.createSunny();else if(c<=3)animator.createCloudy();else if(c<=67)animator.createRain();else if(c<=77)animator.createSnow();else animator.createRain()}
async function fetchWeather(lat,lon){const url=`https://api.open-meteo.com/v1/forecast?latitude=${lat}&longitude=${lon}&current=temperature_2m,relative_humidity_2m,apparent_temperature,precipitation,weather_code,wind_speed_10m,uv_index,visibility&hourly=temperature_2m,precipitation_probability,weather_code,uv_index,wind_speed_10m&daily=weather_code,temperature_2m_max,temperature_2m_min,sunrise,sunset,precipitation_probability_max,wind_speed_10m_max,uv_index_max&forecast_days=7&temperature_unit=${state.settings.tempUnit}&wind_speed_unit=mph&timezone=America%2FNew_York&past_days=0`;const r=await fetch(url);if(!r.ok)throw new Error(`HTTP ${r.status}`);return r.json()}
async function fetch30DayHistory(lat,lon){try{const e=new Date(),s=new Date();s.setDate(s.getDate()-30);const start=s.toISOString().split('T')[0],end=e.toISOString().split('T')[0],u=`https://archive-api.open-meteo.com/v1/archive?latitude=${lat}&longitude=${lon}&start_date=${start}&end_date=${end}&daily=temperature_2m_max,temperature_2m_min&temperature_unit=${state.settings.tempUnit}&timezone=America%2FNew_York`,r=await fetch(u);if(!r.ok)return[];const d=await r.json();return d.daily.time.map((dt,i)=>({date:dt,high:d.daily.temperature_2m_max[i],low:d.daily.temperature_2m_min[i]}))}catch{return[]}}
async function fetchAQI(lat,lon){try{const u=`https://air-quality-api.open-meteo.com/v1/air-quality?latitude=${lat}&longitude=${lon}&current=us_aqi,pm10,pm2_5`,r=await fetch(u);if(!r.ok)return null;return r.json()}catch{return null}}
async function fetchHistoricalWeather(lat,lon){try{const t=new Date(),y=new Date(t);y.setFullYear(y.getFullYear()-1);const ds=y.toISOString().split('T')[0],u=`https://archive-api.open-meteo.com/v1/archive?latitude=${lat}&longitude=${lon}&start_date=${ds}&end_date=${ds}&daily=temperature_2m_max,temperature_2m_min,precipitation_sum&temperature_unit=${state.settings.tempUnit}&timezone=America%2FNew_York`,r=await fetch(u);if(!r.ok)return null;return r.json()}catch{return null}}
async function loadWeather(){state.loading=true;state.error=null;if(state.weather.city1&&state.weather.city2)state.previousWeather={city1:JSON.parse(JSON.stringify(state.weather.city1)),city2:JSON.parse(JSON.stringify(state.weather.city2))};render();try{const[d1,d2,a1,a2,h1,h2,hi1,hi2]=await Promise.all([fetchWeather(state.settings.city1.lat,state.settings.city1.lon),fetchWeather(state.settings.city2.lat,state.settings.city2.lon),fetchAQI(state.settings.city1.lat,state.settings.city1.lon),fetchAQI(state.settings.city2.lat,state.settings.city2.lon),fetchHistoricalWeather(state.settings.city1.lat,state.settings.city1.lon),fetchHistoricalWeather(state.settings.city2.lat,state.settings.city2.lon),fetch30DayHistory(state.settings.city1.lat,state.settings.city1.lon),fetch30DayHistory(state.settings.city2.lat,state.settings.city2.lon)]);state.weather={city1:d1,city2:d2};state.aqi={city1:a1,city2:a2};state.historical={city1:h1,city2:h2};state.history30Days={city1:hi1,city2:hi2};state.lastUpdate=new Date();updateStreaks();updateWeatherAnimation();if(state.previousWeather.city1)checkWeatherChanges()}catch(e){state.error=e.message;console.error('Error:',e)}state.loading=false;render()}
function checkWeatherChanges(){['city1','city2'].forEach(c=>{const p=state.previousWeather[c],n=state.weather[c];if(!p||!n)return;const t=Math.abs(n.current.temperature_2m-p.current.temperature_2m);if(t>2||n.current.weather_code!==p.current.weather_code)triggerWeatherTransition()})}
function triggerWeatherTransition(){if(!state.settings.animations)return;setTimeout(()=>{document.querySelectorAll('.weather-card').forEach(c=>{c.classList.add('weather-transition');setTimeout(()=>c.classList.remove('weather-transition'),1200)})},100)}
function updateStreaks(){const today=new Date().toDateString();['city1','city2'].forEach(c=>{const d=state.weather[c];if(!d)return;const code=d.current.weather_code,cond=code===0?'sunny':code<=67?'rainy':'snowy';if(!state.streaks[c].lastDate||state.streaks[c].lastDate!==today){if(state.streaks[c].lastCondition===cond)state.streaks[c].count=(state.streaks[c].count||0)+1;else{state.streaks[c].count=1;state.streaks[c].lastCondition=cond}state.streaks[c].lastDate=today}});localStorage.setItem('weatherStreaks',JSON.stringify(state.streaks))}
function getMoonPhase(){const d=new Date();let y=d.getFullYear(),m=d.getMonth()+1,day=d.getDate(),c=0,e=0,j=0,b=0;if(m<3){y--;m+=12}c=365.25*y;e=30.6*(m+1);j=c+e+day-694039.09;j/=29.5305882;b=parseInt(j);j-=b;b=Math.round(j*8);if(b>=8)b=0;const p=[{name:'New Moon',emoji:'🌑'},{name:'Waxing Crescent',emoji:'🌒'},{name:'First Quarter',emoji:'🌓'},{name:'Waxing Gibbous',emoji:'🌔'},{name:'Full Moon',emoji:'🌕'},{name:'Waning Gibbous',emoji:'🌖'},{name:'Last Quarter',emoji:'🌗'},{name:'Waning Crescent',emoji:'🌘'}];return p[b]}
function todayForwardIndex(arr){const now=new Date();const ny=new Date(now.toLocaleString('en-US',{timeZone:'America/New_York'}));ny.setHours(0,0,0,0);let idx=arr.findIndex(s=>{const d=new Date(s+'T00:00:00-05:00');return d>=ny});return idx<0?0:idx}
function prepare7DayData(){const d1=state.weather.city1.daily,d2=state.weather.city2.daily,s=todayForwardIndex(d1.time);return d1.time.slice(s,s+7).map((dt,i)=>({date:new Date(dt).toLocaleDateString('en-US',{month:'short',day:'numeric'}),high1:Math.round(d1.temperature_2m_max?.[s+i]??0),low1:Math.round(d1.temperature_2m_min?.[s+i]??0),high2:Math.round(d2.temperature_2m_max?.[s+i]??0),low2:Math.round(d2.temperature_2m_min?.[s+i]??0)}))}
function toNYNowRoundedHour(){const n=new Date();const ny=new Date(n.toLocaleString('en-US',{timeZone:'America/New_York'}));ny.setMinutes(0,0,0);return ny}
function prepare24HourData(){const h1=state.weather.city1.hourly,h2=state.weather.city2.hourly,target=toNYNowRoundedHour().getTime(),idx=h1.time.findIndex(t=>new Date(t).getTime()===target),s=idx>=0?idx:0;return Array.from({length:24},(_,i)=>{const k=s+i;const label=h1.time[k]?new Date(h1.time[k]).toLocaleTimeString('en-US',{hour:'numeric',hour12:true}):'';return{time:label,temp1:Math.round(h1.temperature_2m?.[k]??0),temp2:Math.round(h2.temperature_2m?.[k]??0),uv1:Math.max(0,h1.uv_index?.[k]??0),uv2:Math.max(0,h2.uv_index?.[k]??0)}})}
function getWeatherIcon(c){if(c===0)return'☀️';if(c<=3)return'⛅';if(c<=67)return'🌧️';if(c<=77)return'🌨️';if(c<=82)return'🌧️';return'⛈️'}
function formatTime(d){return new Date(d).toLocaleTimeString('en-US',{hour:'numeric',minute:'2-digit',hour12:true})}
function getUVLevel(u){if(u<=2)return{level:'Low',color:'text-green-400'};if(u<=5)return{level:'Moderate',color:'text-yellow-400'};if(u<=7)return{level:'High',color:'text-orange-400'};if(u<=10)return{level:'Very High',color:'text-red-400'};return{level:'Extreme',color:'text-purple-400'}}
function render(){const theme=THEMES[state.settings.theme];document.body.className=theme.bg;const app=document.getElementById('app');if(state.loading){app.innerHTML=`<div class="min-h-screen flex items-center justify-center ${theme.bg}"><div class="text-2xl ${theme.text}">Loading weather data...</div></div>`;return}if(state.error){app.innerHTML=`<div class="min-h-screen flex items-center justify-center p-8 ${theme.bg}"><div class="text-center max-w-2xl"><div class="text-2xl text-red-400 mb-4">⚠️ Error Loading Weather Data</div><div class="${theme.text} mb-4">${state.error}</div><button onclick="loadWeather()" class="bg-blue-600 hover:bg-blue-700 px-6 py-3 rounded-xl transition-colors text-white">Try Again</button></div></div>`;return}const{city1,city2}=state.weather;if(!city1||!city2)return;const moon=getMoonPhase();const comp=getComparisonStats(city1,city2);const best=calculateBestPlace();app.innerHTML=`<div class="min-h-screen p-4 md:p-8 ${theme.bg}"><div class="max-w-7xl mx-auto"><div class="flex flex-col md:flex-row justify-between items-start md:items-center mb-6 gap-4"><h1 class="text-3xl md:text-4xl font-light ${theme.text}">Armstrong Weather Dashboard</h1><div class="flex gap-2 flex-wrap"><button onclick="state.battleMode=!state.battleMode;render();" class="flex items-center gap-2 ${state.battleMode?'bg-green-600':theme.card} ${theme.border} border hover:opacity-80 px-4 py-2 rounded-xl transition-colors text-white">⚔️ Battle</button><button onclick="shareWeather()" class="flex items-center gap-2 ${theme.card} ${theme.border} border hover:opacity-80 px-4 py-2 rounded-xl transition-colors ${theme.text}">📤 Share</button><button onclick="loadWeather()" class="flex items-center gap-2 ${theme.card} ${theme.border} border hover:opacity-80 px-4 py-2 rounded-xl transition-colors ${theme.text}">🔄 Refresh</button><button onclick="state.showSettings=true;render();" class="flex items-center gap-2 ${theme.card} ${theme.border} border hover:opacity-80 px-4 py-2 rounded-xl transition-colors ${theme.text}">⚙️ Settings</button></div></div>${state.lastUpdate?`<div class="text-sm mb-6 ${theme.text} opacity-60">Last updated: ${state.lastUpdate.toLocaleString()}</div>`:''}${state.battleMode?`<div class="${theme.card} ${theme.border} border rounded-2xl p-6 mb-6 ${best.winner.key==='city1'?'battle-animation':''}"><div class="text-center"><div class="text-2xl md:text-3xl font-bold ${theme.text} mb-4">🏆 Best Place To Be: ${best.winner.city}</div><div class="text-4xl md:text-6xl font-light ${theme.text} mb-4">Weather Score: ${best.winner.score}/200</div></div></div>`:''}<div class="grid grid-cols-1 md:grid-cols-3 gap-4 mb-6"><div class="${theme.card} ${theme.border} border rounded-2xl p-4"><div class="text-center"><div class="text-4xl mb-2">${moon.emoji}</div><div class="${theme.text} font-medium">${moon.name}</div></div></div><div class="${theme.card} ${theme.border} border rounded-2xl p-4 md:col-span-2"><div class="${theme.text} font-medium mb-2">Quick Comparison</div><div class="text-sm ${theme.text} opacity-80 space-y-1"><div>🌡️ ${comp.temp}</div><div>💧 ${comp.humidity}</div><div>☀️ ${comp.uv}</div></div></div></div><div class="flex gap-2 mb-6 overflow-x-auto"><button onclick="state.activeTab='overview';render();" class="px-4 md:px-6 py-3 rounded-xl transition-colors whitespace-nowrap ${state.activeTab==='overview'?'bg-blue-600 text-white':theme.card+' '+theme.text}">Overview</button><button onclick="state.activeTab='charts';render();renderCharts();" class="px-4 md:px-6 py-3 rounded-xl transition-colors whitespace-nowrap ${state.activeTab==='charts'?'bg-blue-600 text-white':theme.card+' '+theme.text}">📊 Charts</button><button onclick="state.activeTab='insights';render();" class="px-4 md:px-6 py-3 rounded-xl transition-colors whitespace-nowrap ${state.activeTab==='insights'?'bg-blue-600 text-white':theme.card+' '+theme.text}">💡 Insights</button><button onclick="state.activeTab='outfit';render();" class="px-4 md:px-6 py-3 rounded-xl transition-colors whitespace-nowrap ${state.activeTab==='outfit'?'bg-blue-600 text-white':theme.card+' '+theme.text}">👔 Outfit</button></div><div id="shareCapture">${state.activeTab==='overview'?renderOverview(city1,city2,theme,best):state.activeTab==='charts'?renderChartsView(theme):state.activeTab==='outfit'?renderOutfitView(city1,city2,theme):renderInsightsView(city1,city2,theme)}</div></div>${state.showSettings?renderSettings(theme):''}</div>`}
function renderOverview(c1,c2,theme,best){const s=todayForwardIndex(c1.daily.time);return`<div class="flex flex-col lg:flex-row gap-6">${renderWeatherCard(c1,state.settings.city1.name,theme,state.battleMode&&best.winner.key==='city1','slide-in-left',s)}${renderWeatherCard(c2,state.settings.city2.name,theme,state.battleMode&&best.winner.key==='city2','slide-in-right',s)}</div>`}
function renderWeatherCard(data,cityName,theme,isWinner,anim,s){const c=data.current,d=data.daily,u=getUVLevel(c.uv_index||0);return`<div class="flex-1 ${theme.card} ${theme.border} border rounded-2xl p-6 md:p-8 ${isWinner?'winner-glow':''} weather-card ${anim}"><h2 class="text-xl md:text-2xl font-light mb-6 ${theme.text}">${cityName} ${isWinner?'🏆':''}</h2><div class="flex items-center gap-4 mb-6"><span class="text-5xl">${getWeatherIcon(c.weather_code)}</span><div><div class="text-4xl ${theme.text}">${Math.round(c.temperature_2m)}°</div><div class="${theme.text} opacity-60 text-base">Feels like ${Math.round(c.apparent_temperature)}°</div></div></div><div class="grid grid-cols-2 gap-3"><div class="${theme.card} ${theme.border} border rounded-xl p-3"><div class="${theme.text} opacity-60 text-xs">💧 Humidity</div><div class="text-xl ${theme.text}">${c.relative_humidity_2m}%</div></div><div class="${theme.card} ${theme.border} border rounded-xl p-3"><div class="${theme.text} opacity-60 text-xs">💨 Wind</div><div class="text-xl ${theme.text}">${Math.round(c.wind_speed_10m)} mph</div></div><div class="${theme.card} ${theme.border} border rounded-xl p-3"><div class="${theme.text} opacity-60 text-xs">☀️ UV</div><div class="text-xl ${theme.text}">${Math.round(c.uv_index||0)} <span class="${u.color} text-xs">${u.level}</span></div></div><div class="${theme.card} ${theme.border} border rounded-xl p-3"><div class="${theme.text} opacity-60 text-xs">👁️ Visibility</div><div class="text-xl ${theme.text}">${Math.round((c.visibility||0)/1609.34)} mi</div></div><div class="${theme.card} ${theme.border} border rounded-xl p-3"><div class="${theme.text} opacity-60 text-xs">🌅 Sunrise</div><div class="text-base ${theme.text}">${formatTime(d.sunrise[s])}</div></div><div class="${theme.card} ${theme.border} border rounded-xl p-3"><div class="${theme.text} opacity-60 text-xs">🌇 Sunset</div><div class="text-base ${theme.text}">${formatTime(d.sunset[s])}</div></div></div><h3 class="text-base font-light mt-4 ${theme.text}">7-Day Forecast</h3><div class="space-y-2 mt-2">${d.time.slice(s,s+7).map((dt,i)=>{const uv=getUVLevel(d.uv_index_max[s+i]||0);return`<div class="flex items-center justify-between ${theme.card} ${theme.border} border rounded-xl p-2"><span class="${theme.text} text-xs w-20">${new Date(dt).toLocaleDateString('en-US',{weekday:'short',month:'short',day:'numeric'})}</span><span class="text-xl">${getWeatherIcon(d.weather_code[s+i])}</span><div class="flex gap-2 items-center text-xs"><span class="${theme.text} opacity-60">💧 ${d.precipitation_probability_max[s+i]}%</span><span class="${uv.color}">☀️ ${Math.round(d.uv_index_max[s+i]||0)}</span><span class="${theme.text} font-medium">${Math.round(d.temperature_2m_max[s+i])}°</span><span class="${theme.text} opacity-60">${Math.round(d.temperature_2m_min[s+i])}°</span></div></div>`}).join('')}</div></div>`}
function renderChartsView(theme){const hist=state.history30Days;if(!state.weather.city1||!state.weather.city2)return'';const hourly=prepare24HourData(),weekly=prepare7DayData();setTimeout(()=>{const grid=state.settings.theme==='arctic'?'#ccc':'#333',txt=state.settings.theme==='arctic'?'#111':'#fff';createChart('tempChart','line',{labels:hourly.map(d=>d.time),datasets:[{label:state.settings.city1.name,data:hourly.map(d=>d.temp1),borderColor:'rgb(59,130,246)',tension:.4},{label:state.settings.city2.name,data:hourly.map(d=>d.temp2),borderColor:'rgb(245,158,11)',tension:.4}]},{plugins:{legend:{labels:{color:txt}}},scales:{x:{ticks:{color:txt},grid:{color:grid}},y:{ticks:{color:txt},grid:{color:grid}}}});createChart('weeklyChart','bar',{labels:weekly.map(d=>d.date),datasets:[{label:`${state.settings.city1.name} High`,data:weekly.map(d=>d.high1),backgroundColor:'rgba(59,130,246,.8)'},{label:`${state.settings.city2.name} High`,data:weekly.map(d=>d.high2),backgroundColor:'rgba(245,158,11,.8)'}]},{plugins:{legend:{labels:{color:txt}}},scales:{x:{ticks:{color:txt},grid:{color:grid}},y:{ticks:{color:txt},grid:{color:grid}}}});if(hist.city1.length>0){createChart('history30Chart','line',{labels:hist.city1.map(d=>new Date(d.date).toLocaleDateString('en-US',{month:'short',day:'numeric'})),datasets:[{label:`${state.settings.city1.name} High`,data:hist.city1.map(d=>d.high),borderColor:'rgb(59,130,246)',tension:.4,fill:false},{label:`${state.settings.city2.name} High`,data:hist.city2.map(d=>d.high),borderColor:'rgb(245,158,11)',tension:.4,fill:false}]},{plugins:{legend:{labels:{color:txt}}},scales:{x:{ticks:{color:txt,maxTicksLimit:10},grid:{color:grid}},y:{ticks:{color:txt},grid:{color:grid}}}})}},100);return`<div class="space-y-6"><div class="${theme.card} ${theme.border} border rounded-2xl p-4"><h3 class="text-lg ${theme.text}">24-Hour Temperature</h3><canvas id="tempChart"></canvas></div><div class="${theme.card} ${theme.border} border rounded-2xl p-4"><h3 class="text-lg ${theme.text}">7-Day Temperature Range</h3><canvas id="weeklyChart"></canvas></div>${hist.city1.length>0?`<div class="${theme.card} ${theme.border} border rounded-2xl p-4"><h3 class="text-lg ${theme.text}">📅 30-Day History</h3><canvas id="history30Chart"></canvas></div>`:''}</div>`}
function createChart(id,type,data,options){const c=document.getElementById(id);if(!c)return;const ctx=c.getContext('2d');if(c.chart)c.chart.destroy();c.chart=new Chart(ctx,{type,data,options})}
function renderSettings(theme){return`<div class="fixed inset-0 bg-black bg-opacity-80 flex items-center justify-center z-50 p-4"><div class="${theme.card} ${theme.border} border rounded-2xl p-6 max-w-2xl w-full"><div class="flex justify-between items-center mb-6"><h2 class="text-xl ${theme.text}">Settings</h2><button onclick="state.showSettings=false;render();" class="${theme.text} text-2xl">×</button></div><div class="space-y-4"><input id="city1Name" value="${state.settings.city1.name}" class="w-full ${theme.card} ${theme.border} border rounded-xl px-4 py-3 ${theme.text}"><input id="city1Lat" type="number" step="0.0001" value="${state.settings.city1.lat}" class="w-full ${theme.card} ${theme.border} border rounded-xl px-4 py-2 ${theme.text}"><input id="city1Lon" type="number" step="0.0001" value="${state.settings.city1.lon}" class="w-full ${theme.card} ${theme.border} border rounded-xl px-4 py-2 ${theme.text}"><input id="city2Name" value="${state.settings.city2.name}" class="w-full ${theme.card} ${theme.border} border rounded-xl px-4 py-3 ${theme.text}"><input id="city2Lat" type="number" step="0.0001" value="${state.settings.city2.lat}" class="w-full ${theme.card} ${theme.border} border rounded-xl px-4 py-2 ${theme.text}"><input id="city2Lon" type="number" step="0.0001" value="${state.settings.city2.lon}" class="w-full ${theme.card} ${theme.border} border rounded-xl px-4 py-2 ${theme.text}"><select id="tempUnit" class="w-full ${theme.card} ${theme.border} border rounded-xl px-4 py-3 ${theme.text}"><option value="fahrenheit" ${state.settings.tempUnit==='fahrenheit'?'selected':''}>Fahrenheit</option><option value="celsius" ${state.settings.tempUnit==='celsius'?'selected':''}>Celsius</option></select><select id="theme" class="w-full ${theme.card} ${theme.border} border rounded-xl px-4 py-3 ${theme.text}">${Object.entries(THEMES).map(([k,v])=>`<option value="${k}" ${state.settings.theme===k?'selected':''}>${v.name}</option>`).join('')}</select><div class="flex items-center justify-between"><span class="${theme.text}">Animations</span><input type="checkbox" id="animations" ${state.settings.animations?'checked':''}></div><button onclick="saveSettings()" class="w-full bg-blue-600 hover:bg-blue-700 text-white rounded-xl py-3">Apply</button></div></div></div>`}
function saveSettings(){state.settings={city1:{name:city1Name.value,lat:parseFloat(city1Lat.value),lon:parseFloat(city1Lon.value)},city2:{name:city2Name.value,lat:parseFloat(city2Lat.value),lon:parseFloat(city2Lon.value)},tempUnit:tempUnit.value,theme:theme.value,animations:animations.checked,autoRefresh:state.settings.autoRefresh};localStorage.setItem('weatherSettings',JSON.stringify(state.settings));state.showSettings=false;loadWeather()}
function calculateBestPlace(){const c1=state.weather.city1,c2=state.weather.city2;let s1=0,s2=0,r1=[],r2=[];const t1=c1.current.temperature_2m,t2=c2.current.temperature_2m,id=72,ts1=100-Math.abs(t1-id)*2,ts2=100-Math.abs(t2-id)*2;s1+=Math.max(0,ts1);s2+=Math.max(0,ts2);if(ts1>ts2)r1.push(`Better
